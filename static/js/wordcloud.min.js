/**
 * Simple Word Cloud implementation
 * A lightweight word cloud generator for the Career Insights Platform
 */

(function(global) {
    'use strict';

    function WordCloud(canvas, options) {
        this.canvas = canvas;
        this.ctx = canvas.getContext('2d');
        this.options = Object.assign({
            fontFamily: 'Arial, sans-serif',
            fontWeight: 'normal',
            color: '#333',
            backgroundColor: '#fff',
            minFontSize: 12,
            maxFontSize: 60,
            padding: 5,
            spiral: 'archimedean',
            rotateRatio: 0.1,
            rotateMax: 90,
            rotateMin: -90
        }, options);
        
        this.words = [];
        this.placed = [];
    }

    WordCloud.prototype.setWords = function(words) {
        this.words = words.map(word => {
            if (typeof word === 'string') {
                return { text: word, weight: 1 };
            }
            return word;
        });
        return this;
    };

    WordCloud.prototype.render = function() {
        if (!this.words.length) return;

        // Clear canvas
        this.ctx.fillStyle = this.options.backgroundColor;
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

        // Calculate font sizes
        const maxWeight = Math.max(...this.words.map(w => w.weight));
        const minWeight = Math.min(...this.words.map(w => w.weight));
        const weightRange = maxWeight - minWeight || 1;

        this.words.forEach(word => {
            const normalizedWeight = (word.weight - minWeight) / weightRange;
            word.fontSize = this.options.minFontSize + 
                (this.options.maxFontSize - this.options.minFontSize) * normalizedWeight;
        });

        // Sort words by weight (largest first)
        this.words.sort((a, b) => b.weight - a.weight);

        // Place words
        this.placed = [];
        const centerX = this.canvas.width / 2;
        const centerY = this.canvas.height / 2;

        this.words.forEach((word, index) => {
            const fontSize = word.fontSize;
            this.ctx.font = `${this.options.fontWeight} ${fontSize}px ${this.options.fontFamily}`;
            
            const metrics = this.ctx.measureText(word.text);
            const width = metrics.width;
            const height = fontSize;

            // Determine rotation
            let rotation = 0;
            if (Math.random() < this.options.rotateRatio) {
                rotation = this.options.rotateMin + 
                    Math.random() * (this.options.rotateMax - this.options.rotateMin);
            }

            // Find position
            let position = this.findPosition(width, height, centerX, centerY, rotation);
            
            if (position) {
                // Set color
                const colors = ['#3b82f6', '#10b981', '#8b5cf6', '#f59e0b', '#ef4444', '#06b6d4'];
                const color = word.color || colors[index % colors.length];
                
                this.drawWord(word.text, position.x, position.y, fontSize, color, rotation);
                
                this.placed.push({
                    x: position.x,
                    y: position.y,
                    width: width,
                    height: height,
                    rotation: rotation
                });
            }
        });
    };

    WordCloud.prototype.findPosition = function(width, height, startX, startY, rotation) {
        let angle = 0;
        let radius = 1;
        const radiusInc = 2;
        const angleInc = 0.1;
        
        for (let i = 0; i < 1000; i++) {
            const x = startX + radius * Math.cos(angle) - width / 2;
            const y = startY + radius * Math.sin(angle) - height / 2;
            
            if (this.canPlaceAt(x, y, width, height, rotation)) {
                return { x: x + width / 2, y: y + height / 2 };
            }
            
            angle += angleInc;
            if (angle > Math.PI * 2) {
                angle = 0;
                radius += radiusInc;
            }
        }
        
        return null;
    };

    WordCloud.prototype.canPlaceAt = function(x, y, width, height, rotation) {
        // Check canvas bounds
        if (x < 0 || y < 0 || x + width > this.canvas.width || y + height > this.canvas.height) {
            return false;
        }
        
        // Check collision with placed words
        for (let placed of this.placed) {
            if (this.intersects(
                x, y, width, height,
                placed.x - placed.width / 2, placed.y - placed.height / 2, 
                placed.width, placed.height
            )) {
                return false;
            }
        }
        
        return true;
    };

    WordCloud.prototype.intersects = function(x1, y1, w1, h1, x2, y2, w2, h2) {
        const padding = this.options.padding;
        return !(x1 > x2 + w2 + padding || 
                x2 > x1 + w1 + padding || 
                y1 > y2 + h2 + padding || 
                y2 > y1 + h1 + padding);
    };

    WordCloud.prototype.drawWord = function(text, x, y, fontSize, color, rotation) {
        this.ctx.save();
        
        this.ctx.translate(x, y);
        this.ctx.rotate(rotation * Math.PI / 180);
        
        this.ctx.font = `${this.options.fontWeight} ${fontSize}px ${this.options.fontFamily}`;
        this.ctx.fillStyle = color;
        this.ctx.textAlign = 'center';
        this.ctx.textBaseline = 'middle';
        
        this.ctx.fillText(text, 0, 0);
        
        this.ctx.restore();
    };

    // Static method to create word cloud
    WordCloud.create = function(canvas, words, options) {
        const cloud = new WordCloud(canvas, options);
        cloud.setWords(words);
        cloud.render();
        return cloud;
    };

    // Export to global
    global.WordCloud = WordCloud;

    // If jQuery is available, create plugin
    if (typeof $ !== 'undefined') {
        $.fn.wordCloud = function(words, options) {
            return this.each(function() {
                const canvas = this.tagName === 'CANVAS' ? this : this.querySelector('canvas');
                if (canvas) {
                    WordCloud.create(canvas, words, options);
                }
            });
        };
    }

})(typeof window !== 'undefined' ? window : this);
